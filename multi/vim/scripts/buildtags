#! /bin/bash
# vim:set fdm=marker:

# Build the filelist, tag file, and cscope databases
# usage:
#   buildtags.sh cscope-binary lang [directories to search]
#
# example to build C++ in current directory recursively:
#   buildtags.sh cscope cpp
# example for the same but only tags (no filelist or cscope):
#   buildtags.sh tagonly cpp

# Installing dependents:
#   aptinstall exuberant-ctags cscope
#   pip install pycscope

cscope=$1
if [ $# -lt 1 ] ; then
    # assume plain cscope if we got no input
    cscope=cscope
fi

filetype=$2

search_dirs=.
if [ $# -gt 2 ] ; then
    # search directories passed in

	# ignore cscope and filetype
	shift
	shift
	# use remaining parameters
    search_dirs=$*
fi

tagdir=$PWD
tagfile=$tagdir/filelist

cd $tagdir


# Build filelist	{{{
touch $tagfile
rm $tagfile
if [ "$filetype" == "cpp" ] ; then
    # Probably a big c++ project, so use the simple format
    find $search_dirs -type f \( -iname "*.cpp" -o -iname "*.h" \) -print | sort -f >> $tagfile

elif [ "$filetype" == "lua-engine" ] ; then
	# Lua-based engines use C++ and lua.
    find $search_dirs -type f \( -iname "*.cpp" -o -iname "*.h" -o -iname "*.lua" \) -print | sort -f >> $tagfile

elif [ "$filetype" == "unreal" ] ; then
	# A big unreal c++ project, so use the simple format. Ignore generated code
	# in the Intermediate folder (a nuisance in plugins that don't have a fixed
	# path format).
    find $search_dirs -type f \( -iname "*.cpp" -o -iname "*.h" \) -print | grep -v "Intermediate.Build" | sort -f >> $tagfile

elif [ "$filetype" == "cs" ] ; then
    # C sharp code. don't include examples which are often alongside.
    find $search_dirs -not \( -name "examples" -prune \) -a -not \( -name "obj" -prune \) -a \( -type f -iname "*.cs" -o -iname "*.xaml" \) -print | sort -f >> $tagfile

elif [ "$filetype" == "android" ] ; then
    # Android uses java and xml. Assume we're in the source directory
    find $tagdir ../res -type f \( -iname "*.xml" -o -iname "*.java" \) -print | sort -f >> $tagfile

elif [ "$filetype" == "java" ] ; then
    # The only types we're interested in are java
    find $search_dirs -type f -iname "*.java" -print | sort -f >> $tagfile

else
    # Don't know what we are so include anything that's not binary or junk (from vimdoc)
    # DavidAdd: Files: .git tags filelist
    # DavidAdd: Filetypes: pyc out
    # DavidAdd: Folder: v (for virtualenv)
    find $search_dirs \( -name .git -o -name v -o -name .svn -o -name .bzr -o -name tags -o -name filelist -o -wholename ./classes \) -prune -o -not -iregex '.*\.\(pyc\|jar\|gif\|jpg\|class\|exe\|dll\|pdd\|sw[op]\|xls\|doc\|pdf\|zip\|tar\|ico\|ear\|war\|dat\|out\).*' -type f -print | sort -f >> $tagfile

fi

# convert cygwin paths to windows paths
sed -i -e"s,^/cygdrive/\([[:alpha:]]\)/,\1:/," $tagfile
# I used to make a link in the root to each drive letter (/c for c:). With Bash
# on Windows, I can just make a c:/mnt folder with all of the drives in it.
# However, this acts wonky if the local drive isn't c:.
# I'm not doing this here because Bash on Windows tools (ctags) need unix
# paths. Instead, postponed this later so vim only sees Windows paths.
#sed -i -e"s,^//\([[:alpha:]]\)/,\1:/," $tagfile
# }}}

# Build ctags and cscope	{{{
# Fixup the filelist

case $OSTYPE in
	cygwin*)
	# mlcscope needs full paths, so replace the relative path with the fully
	# qualified path
	# TODO: cygwin replaced mlcscope with cscope. Does it still have this problem?
	sed -i -e"s|^\./|$tagdir/|" $tagfile
;;
	*)
	# cscope doesn't seem to need full paths
	# do nothing.
;;
esac

function fix_file_prefix_for_tags_on_win32()
{
    # Vim doesn't understand / as beginning of the path in Windows so it thinks
    # they're relative paths and can't find anything. (I'm using gvim.exe but
    # building tags with Unix subsystem.)
    sed -i -e"s,/mnt/\([[:alpha:]]\)/,\1:/," $1

    # For reference, opposite transformation.
    # sed -e"s,\([[:alpha:]]\):/,/mnt/\1/,"
}

case $filetype in
    cpp|cs|c)
        ctags --c++-kinds=+p --fields=+iaS --extra=+q -L $tagfile
        ;;
    lua-engine)
        # ltags makes for better lua tags and doesn't bloat the database with
        # c++.
        # Builds separate lua.tags from cpp tags file. Vim must have:
        #   setlocal tags+=./lua.tags;/
        # (See ~/.vim/bundle/lua-david/after/ftplugin/lua.vim)
        grep lua $tagfile > $tagfile.luaonly
        # The -nv option is no good for us since we declare classes as locals
        # returned from a file. Don't use it!
        lua ~/.vim/bundle/lua-david/lib/ltags/ltags -filelist $tagfile.luaonly
        rm $tagfile.luaonly

        fix_file_prefix_for_tags_on_win32 tags
        mv tags lua.tags

        ctags --c++-kinds=+p --fields=+iaS --extra=+q -L $tagfile --exclude=*.lua
        ;;
    *)
        ctags -L $tagfile
        ;;
esac

fix_file_prefix_for_tags_on_win32 tags

if [ $cscope == "tagonly" ] ; then
	rm $tagfile

else
	case $filetype in
		python)
			# Requires the python package pycscope:
			#   pip install pycscope
			pycscope -i filelist
			;;
		*)
			# Build cscope database
			#	-b              Build the database only.
			#	-k              Kernel Mode - don't use /usr/include for #include files.
			#	-q              Build an inverted index for quick symbol seaching.
			# May want to consider these flags
			#	-m "lang"       Use lang for multi-lingual cscope.
			#	-R              Recurse directories for files.
			$cscope -b -q -k -i filelist

            # While cscope changed from cscope.out.$type to cscope.$type.out [1],
            # mlcscope will still complain that it cannot find cscope.out.in. Ignore
            # this error! It's not failing to find cscope.in.out, it's just stupid. If
            # you try to rename the files (mv cscope.in.out cscope.out.in), cscope will
            # stop working (you'll get errors about your database being invalid).
            # [1] https://bugzilla.redhat.com/show_bug.cgi?format=multiple&id=602738
            # TODO: cygwin replaced mlcscope with cscope. Does it still have this problem?
            ;;
    esac
fi

# }}}

fix_file_prefix_for_tags_on_win32 $tagfile

cd -

