# vim:sw=4:et:
[user]
    name = David Briscoe
    email = idbrii@gmail.com
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
[alias]
    h = help
    st = status
    ci = commit
    br = branch
    ff = merge --ff-only
    purify = checkout
    refloginspect = log --walk-reflogs
    diff-staged = diff --cached
    piecemeal = add --patch
    unstage = reset HEAD --
    substat = submodule foreach "git status || :"
    subupdate = sub-update
    # Pass the commit you want to squash/fixup with.
    commit-fixup-with = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    commit-squash-with = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -

    # Update all local branches to match tracking.
    # https://stackoverflow.com/a/76267753/79125
    sync = !git pull --prune --ff-only && git fetch . $(git for-each-ref --format='%(push):%(refname)' refs/heads --exclude="refs/heads/$(git rev-parse --abbrev-ref HEAD)")
    # Which branches contain input commit.
    # https://stackoverflow.com/a/2707110/79125
    which-branch = branch --all --contains

    get-ignore = "!f() { if [ -z \"$1\" ] ; then echo 'Error: get-ignore requires repo type.\nExample: git get-ignore Unity' ; else curl --fail https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore > .gitignore || return ; git add .gitignore; git commit -m'Initial commit: add gitignore' ; fi; }; f"
    # https://stackoverflow.com/a/9370094/79125
    list-tracked-ignored = ls-files -i --exclude-standard
    # https://stackoverflow.com/a/12080920/79125
    list-untracked-ignored = status --ignored
    why-ignore = "!f() { if [ -z \"$*\" ] ; then echo 'Error: why-ignore requires a path.\nExample: git get-ignore *' ; else git check-ignore -v $* | $EDITOR - +'set buftype=nofile' +cgetbuffer +copen +'wincmd o' +cfirst ; fi; }; f"

    # https://stackoverflow.com/a/42544963/79125
    largest-files = "!git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=13 --round=nearest | tail; echo 'commit        size on disk file'"


    # If recurseSubmodules doesn't work, use this to check if submodules were updated.
    # TODO: Should process all submodules? Look in history for modified ones? Should be in submanage?
    check-submodule = "!f() { cd $1; git manage-mine main; cd -; }; f"

    # Interactive merging.
    # Source: http://stackoverflow.com/a/11843922/79125
    #
    # Alternatively, consider using --strategy-option theirs (or ours). See http://stackoverflow.com/a/10697551/79125
    accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u -- \"${@:-.}\"; }; f"
    accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u -- \"${@:-.}\"; }; f"

    # https://help.github.com/articles/checking-out-pull-requests-locally/
    # https://gist.github.com/berkus/8225683
    pr-fetch = "!f() { if [ -z \"$2\" ] ; then echo 'Error: PR fetch requires remote and pull request number.\nExample: git pr-fetch origin 23' ; else git fetch $1 refs/pull/$2/head:refs/remotes/pr/$2 ; fi;  }; f"
    pr-cherry-pick = "!f() { re='^[0-9]+$'; if [ -z \"$1\" -o -z \"${1##*[!0-9]*}\" ] ; then echo 'Error: PR fetch requires pull request number.\nExample: git pr-rebase 23' ; else ( git checkout -b pr_$1 pr/$1 || ( echo 'Hint: Forget to pr-fetch?' && false ) ) && git rebase @{-1} && git checkout @{-1} && git merge --ff-only @{-1} ; fi; }; f"

    what = whatchanged
    who = shortlog -s --
    graph = log --graph --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset'
    histlog = log --pretty=format:\"%C(red)%h%C(reset) %C(blue)%an%C(reset), %C(green)%cr%Creset : %s\"
    changelog = log --abbrev-commit --pretty=short --stat

    stashonto = "!f() { if [ -z \"$1\" ] ; then echo 'Error: stashonto requires destination branch.\nExample: git stashonto main\nExample: git stashonto -b new-branch 98e7f99e' ; else git log --oneline --max-count=1 && git stash --include-untracked && git checkout $* && git log --oneline --max-count=1 && git stash apply ; fi;  }; f"
    # Apply a stash, but use their version of files. Stages files and doesn't create a commit.
    stashforceapply = "!f() { stash=${1:-stash}; git merge --squash --strategy-option=theirs $stash ; }; f"

    # find urls for the current git repo
    hublist = !git remote -v | sed -e"'s#git@\\([^:]*\\):#git://\\1/#;s#.*\\b\\(git\\|https\\?\\)\\b:\\(.*\\)\\(.git\\)\\?\\s.*#https:\\2#'" | uniq
    #   uses 2 sed substitutions:      ^-- change ssh to readonly     ^-- fix protocol and pull out url
    # open all urls for the current git repo
    hub = "!git hublist | while read url ; do xdg-open $url ; done"

    gtm-report = "!echo 'Last month:' ; gtm report -last-month -format project -all"
    # Pass '-all' to these to see combined data for all projects.
    gtm-chart = "!f() { echo 'Last month:' ; if [ -n \"$1\" ] ; then gtm report -last-month -format project $1 ; fi ; gtm report -last-month -format timeline-hours $1 ; }; f"
    gtm-today = "!f() { echo 'Today:' ;      if [ -n \"$1\" ] ; then gtm report -today -format project $1 ; fi ; gtm report -today -format timeline-hours $1 ; }; f"

[log]
    # Use local time and order with increasing precision to show dates like
    # "2023-01-11 Wed 10:27:30 AM". Include the day of the week for relative
    # referencing.
    date=format-local:%Y-%m-%d %a %r

[core]
    excludesfile = ~/.gitignore
    autocrlf = input
[init]
	defaultBranch = main
[branch]
    autosetupmerge = true
; Specify web options in gitconfig.local
; [web]
;     browser = chromium-browser

[rerere]
    # "reuse recorded resolution": check for previous recorded resolutions for
    # conflicts, if they exist, use them to resolve those conflicts
    # automatically.
    enabled = true
[merge]
    # meld is also a good option where it's installed, but diffconflicts is a
    # globally available default.
    tool = diffconflicts
    conflictStyle = diff3
[diff]
    renames = copies
[diff "bin"]
    # Allow files to be marked as "diff=bin" in .gitattributes so we can diff
    # the hex output of the files. See "Performing text diffs of binary files"
    # in `git help gitattributes`.
	textconv = hexdump -v -C
	binary = true
[difftool]
    prompt = false
[mergetool]
    prompt = false
[mergetool "p4merge"]
    cmd = mergetool.p4merge.git.sh $LOCAL $REMOTE $BASE $MERGED
[difftool "beyond"]
    cmd = difftool.beyond.git.sh $LOCAL $REMOTE $BASE
[mergetool "beyond"]
    cmd = mergetool.beyond.git.sh $LOCAL $REMOTE $BASE $MERGED
[difftool "gvim"]
    cmd = difftool.gvim.git.sh $LOCAL $REMOTE $BASE
[mergetool "gvim"]
    cmd = mergetool.gvim.git.sh $LOCAL $REMOTE $BASE $MERGED
[mergetool "diffconflicts"]
    cmd = mergetool.diffconflicts.git.sh gvim $BASE $LOCAL $REMOTE $MERGED
    trustExitCode = true
    keepBackup = false

[push]
    # Validate that submodules have been pushed before pushing owner repo.
    recurseSubmodules = check
	default = simple
[pull]
	ff = only

[svn]
    rmdir = true

[credential]
# To skip entering passwords for each golang repo, use:
#	helper = store
# Get a token, give repo access, and do:
#   echo "https://${GITHUB_TOKEN}:x-oauth-basic@github.com" >> ~/.git-credentials
# Source: https://gist.github.com/shurcooL/6927554#gistcomment-1986695
# Archive: http://archive.is/7DQCc
# However, I probably will forget that it's writing credentials in plaintext
# and enter a password, so use manager instead.
# Install git-credential-manager to get this to work. Avoid manager-core since
# it's the old one.
    helper = manager

[credential "helperselector"]
    selected = manager

[url "https://github.com"]
# "git:// protocol is less secure." Use https instead.
# https://gist.github.com/grawity/4392747
# This does not change the fact that most of my repos use git@github.com which
# uses ssh and requires sshkey authentication for every remote action.
    insteadOf = git://github.com

[url "git@github.com:idbrii"]
    # Use ssh instead of https for github so I can use ssh-agent.
    # pip, gh, and other tools default to https.
    insteadOf = https://github.com/idbrii

# In theory this might work, but doesn't for git version 2.20.1
; [url "https://github.com/"]
; # Don't prompt for password on pull.
; # > https uses password authentication for pushing, and still allows anonymous
; # > pull.
; # >
; # > ssh authentication is needed for all connections, so you always need a
; # > GitHub account â€“ even to pull or clone.
; # https://gist.github.com/grawity/4392747
;     pullInsteadOf = git@github.com:

[include]
    # Do not store github or giggle information in this file! Instead, store
    # them in a computer-local config file. This works on cygwin git 2.1.1.
    # This include must be a the end so clobbers options set above.
    path = ~/.gitconfig.local
