# vim:sw=4:et:
[user]
    name = David Briscoe
    email = idbrii@gmail.com
[include]
    # Do not store github or giggle information in this file! Instead, store
    # them in a computer-local config file. This works on cygwin git 2.1.1.
    path = ~/.gitconfig.local
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
[alias]
    h = help
    st = status
    ci = commit
    br = branch
    ff = merge --ff-only
    purify = checkout
    refloginspect = log --walk-reflogs
    diff-staged = diff --cached
    piecemeal = add --patch
    unstage = reset HEAD --
    substat = submodule foreach "git status || :"
    subupdate = sub-update
    # Pass the commit you want to squash/fixup with.
    commit-fixup-with = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    commit-squash-with = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -


    # Interactive merging.
    # Source: http://stackoverflow.com/a/11843922/79125
    #
    # Alternatively, consider using --strategy-option theirs (or ours). See http://stackoverflow.com/a/10697551/79125
    accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u -- \"${@:-.}\"; }; f"
    accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u -- \"${@:-.}\"; }; f"

    what = whatchanged
    who = shortlog -s --
    graph = log --graph --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset'
    histlog = log --pretty=format:\"%C(red)%h%C(reset) %C(blue)%an%C(reset), %C(green)%cr%Creset : %s\"
    changelog = log --abbrev-commit --pretty=short --stat

    # find urls for the current git repo
    hublist = !git remote -v | sed -e"'s#git@\\([^:]*\\):#git://\\1/#;s#.*\\(git\\|https\\?\\):\\(.*\\).git.*#https:\\2#'" | uniq
    #   uses 2 sed substitutions:      ^-- change ssh to readonly     ^-- fix protocol and pull out url
    # open all urls for the current git repo
    hub = "!git hublist | while read url ; do xdg-open $url ; done"


[core]
    excludesfile = ~/.gitignore
    autocrlf = input
[branch]
    autosetupmerge = true
[web]
    browser = chromium-browser

[merge]
    # meld is also a good option where it's installed, but gvim is a globally
    # available default.
    tool = gvim
[diff]
    renames = copies
[diff "bin"]
    # Allow files to be marked as "diff=bin" in .gitattributes so we can diff
    # the hex output of the files. See "Performing text diffs of binary files"
    # in `git help gitattributes`.
	textconv = hexdump -v -C
	binary = true
[difftool]
    prompt = false
[mergetool]
    prompt = false
[mergetool "p4merge"]
    cmd = mergetool.p4merge.git.sh $LOCAL $REMOTE $BASE $MERGED
[difftool "beyond"]
    cmd = difftool.beyond.git.sh $LOCAL $REMOTE $BASE
[mergetool "beyond"]
    cmd = mergetool.beyond.git.sh $LOCAL $REMOTE $BASE $MERGED
[difftool "gvim"]
    cmd = difftool.gvim.git.sh $LOCAL $REMOTE $BASE
[mergetool "gvim"]
    cmd = mergetool.gvim.git.sh $LOCAL $REMOTE $BASE $MERGED
[mergetool "diffconflicts"]
    cmd = mergetool.diffconflicts.git.sh gvim $BASE $LOCAL $REMOTE $MERGED
    trustExitCode = true
    keepBackup = false

[push]
    # Validate that submodules have been pushed before pushing owner repo.
    recurseSubmodules = check
	default = simple
